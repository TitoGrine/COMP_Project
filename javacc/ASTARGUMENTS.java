import java.util.ArrayList;

/* Generated By:JJTree: Do not edit this line. ASTARGUMENTS.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTARGUMENTS extends TypeSensitive {
  protected ArrayList<TypeEnum> arguments = new ArrayList<>();

  public ASTARGUMENTS(int id) {
    super(id);
  }

  public ASTARGUMENTS(Parser p, int id) {
    super(p, id);
  }

  @Override
  public void eval(SemanticAnalysis analysis){
    int numChildren = this.jjtGetNumChildren();
    int childIndex = 0;
    SimpleNode childNode;

    while(childIndex < numChildren){
      childNode = (SimpleNode) this.jjtGetChild(childIndex);

      childNode.addSymbolTable(this.symbolTable);
      childNode.eval(analysis);

      if(childNode.id == ParserTreeConstants.JJTARGUMENT){
        this.arguments.add(((ASTARGUMENT) childNode).type);
      }
      else if (childNode.id == ParserTreeConstants.JJTFUNC_METHOD){
        String call = ((ASTFUNC_METHOD) childNode).call;

        if(!this.symbolTable.existsMethodSymbol(call))
          analysis.addError(this.getCoords(), "Method call " + call + " doesn't exist.");

        MethodSymbol methodSymbol = (MethodSymbol) this.symbolTable.getSymbol(call);

        this.arguments.add(methodSymbol.getReturnType());
      } else{
        this.arguments.add(this.getType(childNode, analysis));
      }

      childIndex++;
    }
  }
}
/* JavaCC - OriginalChecksum=4206cf5195297e62078a7d896983dc2e (do not edit this line) */
