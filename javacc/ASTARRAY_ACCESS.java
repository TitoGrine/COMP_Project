/* Generated By:JJTree: Do not edit this line. ASTARRAY_ACCESS.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTARRAY_ACCESS extends Operator {
  protected String object;

  public ASTARRAY_ACCESS(int id) {
    super(id);
  }

  public ASTARRAY_ACCESS(Parser p, int id) {
    super(p, id);
  }

  @Override
  public void eval() throws Exception {
    // TODO: Add symbol

    int numChildren = this.jjtGetNumChildren();

    if(numChildren != 2)
      throw new Exception("ARRAY_ACCESS has an invalid number of children.");

    SimpleNode firstChild = (SimpleNode) this.jjtGetChild(0);
    SimpleNode secondChild = (SimpleNode) this.jjtGetChild(1);


    if(firstChild.id == ParserTreeConstants.JJTARRAY_ACCESS)
      object = ((ASTARRAY_ACCESS) firstChild).object;
    else if(firstChild.id == ParserTreeConstants.JJTNEW)
      object = ((ASTNEW) firstChild).object;
    else if(firstChild.id == ParserTreeConstants.JJTIDENT)
      object = ((ASTIDENT) firstChild).name;
    else if(firstChild.id == ParserTreeConstants.JJTFUNC_METHOD){
      firstChild.addSymbolTable(this.symbolTable);
      firstChild.eval();
      object = ((ASTFUNC_METHOD) firstChild).call;
    }
    else
      throw new Exception("ARRAY_ACCESS must have make a call to an object");

    secondChild.addSymbolTable(this.symbolTable);
    secondChild.eval();

    if(this.validType(secondChild, TypeEnum.INT))
      throw new Exception("ARRAY_ACCESS must have second child returning INT type.");

  }
}
/* JavaCC - OriginalChecksum=22f8f358ed3b439b354e0322ba03ff68 (do not edit this line) */
