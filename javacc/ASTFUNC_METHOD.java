/* Generated By:JJTree: Do not edit this line. ASTFUNCMETHOD.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTFUNC_METHOD extends Operator {
  protected String call;

  public ASTFUNC_METHOD(int id) {
    super(id);
  }

  public ASTFUNC_METHOD(Parser p, int id) {
    super(p, id);
  }

  @Override
  public void eval() throws Exception {
    SimpleNode firstChild = (SimpleNode) this.jjtGetChild(0);
    ASTCALL secondChild = (ASTCALL) this.jjtGetChild(1);

    String object;

    firstChild.addSymbolTable(this.symbolTable);

    if(firstChild.id == ParserTreeConstants.JJTTHIS){
      firstChild.eval();
      object = "";
    } else if(firstChild.id == ParserTreeConstants.JJTIDENT){
      object = ((ASTIDENT) firstChild).name;
    } else if(firstChild.id == ParserTreeConstants.JJTNEW){
      firstChild.eval();
      object = ((ASTNEW) firstChild).object;
    } else if(firstChild.id == ParserTreeConstants.JJTFUNC_METHOD){
      firstChild.eval();
      object = ((ASTFUNC_METHOD) firstChild).call;
    } else
      throw new Exception("Method call to an invalid object");

    secondChild.addSymbolTable(this.symbolTable);
    secondChild.eval()

    String method = secondChild.method;

    if(!this.symbolTable.existsMethodSymbol(object + method))
      throw new Exception("Method " + method + " doesn't exist for class " + (object.isEmpty() ? ((ASTTHIS) firstChild).className : object));

    MethodSymbol methodSymbol = (MethodSymbol) this.symbolTable.getSymbol(object + method);

    if(!methodSymbol.acceptedParameters(secondChild.arguments))
      throw new Exception("Method " + method + " doesn't accept the given arguments.");

    this.call = object + method;
  }
}
/* JavaCC - OriginalChecksum=54a9f6d33a5022ecd7338879131cb817 (do not edit this line) */
