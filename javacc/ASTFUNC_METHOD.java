/* Generated By:JJTree: Do not edit this line. ASTFUNCMETHOD.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTFUNC_METHOD extends SimpleNode {
  protected String call;

  public ASTFUNC_METHOD(int id) {
    super(id);
  }

  public ASTFUNC_METHOD(Parser p, int id) {
    super(p, id);
  }

  @Override
  public void eval() throws Exception {
    int numChildren = this.jjtGetNumChildren();

    if(numChildren != 2)
      throw new Exception("FUNC_METHOD has an invalid number of children.");

    SimpleNode firstChild = (SimpleNode) this.jjtGetChild(0);
    SimpleNode secondChild = (SimpleNode) this.jjtGetChild(1);

    firstChild.addSymbolTable(this.symbolTable);
    firstChild.eval();

    String object;

    if(firstChild.id == ParserTreeConstants.JJTARRAY_ACCESS)
      return;
    else if(firstChild.id == ParserTreeConstants.JJTNEW)
      object = ((ASTNEW) firstChild).object;
    else if(firstChild.id == ParserTreeConstants.JJTIDENT)
      object = ((ASTIDENT) firstChild).name;
    else if(firstChild.id == ParserTreeConstants.JJTFUNC_METHOD){
      firstChild.addSymbolTable(this.symbolTable);
      firstChild.eval();
      object = ((ASTFUNC_METHOD) firstChild).call;
    }
    else
      throw new Exception("FUNC_METHOD must have make a call to an object");

    if(secondChild.id != ParserTreeConstants.JJTCALL)
      throw new Exception(("FUNC_METHOD must have CALL node has second child."));

    secondChild.addSymbolTable(this.symbolTable);
    secondChild.eval();
  }
}
/* JavaCC - OriginalChecksum=54a9f6d33a5022ecd7338879131cb817 (do not edit this line) */
