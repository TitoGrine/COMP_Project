import java.util.ArrayList;

/* Generated By:JJTree: Do not edit this line. ASTMETHOD.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTMETHOD extends SimpleNode {
  protected String methodName;
  protected MethodSymbol methodSymbol;

  public ASTMETHOD(int id) {
    super(id);
  }

  public ASTMETHOD(Parser p, int id) {
    super(p, id);
  }

  public void preProcessMethod(SemanticErrors errors){
    ASTRETURN firstChild = (ASTRETURN) this.jjtGetChild(0);
    ASTIDENT secondChild = (ASTIDENT) this.jjtGetChild(1);

    firstChild.addSymbolTable(this.symbolTable);
    firstChild.eval(errors);

    TypeEnum returnType = firstChild.type;
    this.methodName = secondChild.name;

    SimpleNode thirdChild = (SimpleNode) this.jjtGetChild(2);

    if(thirdChild.id == ParserTreeConstants.JJTARGUMENTS){
      ASTARGUMENTS arguments = (ASTARGUMENTS) thirdChild;

      arguments.addSymbolTable(this.symbolTable);
      arguments.eval(errors);

      methodSymbol = new MethodSymbol(returnType, arguments.arguments);
    } else {
      methodSymbol = new MethodSymbol(returnType);
    }
  }

  @Override
  public void addSymbolTable(SymbolTable symbolTable){
    this.symbolTable = new SymbolTable(symbolTable);
  }

  @Override
  public void eval(SemanticErrors errors){
    int childIndex = 2;

    SimpleNode childNode = (SimpleNode) this.jjtGetChild(childIndex);

    if(childNode.id == ParserTreeConstants.JJTARGUMENTS){
      childIndex++;
      childNode = (SimpleNode) this.jjtGetChild(childIndex);
    }

    ASTMETHOD_BODY methodBody = (ASTMETHOD_BODY) childNode;

    methodBody.addSymbolTable(symbolTable);
    methodBody.eval(errors);

    childIndex++;
    ASTRETURN_EXP returnExp = (ASTRETURN_EXP) this.jjtGetChild(childIndex);

    returnExp.addSymbolTable(this.symbolTable);
    returnExp.eval(errors);

    if(returnExp.expType != methodSymbol.getReturnType())
      errors.addError(this.getCoords(), "Method " + methodName + " returns type not compatible with declaration.");
  }
}
/* JavaCC - OriginalChecksum=ea7e13413ab21b460f76667a3725c2ac (do not edit this line) */
