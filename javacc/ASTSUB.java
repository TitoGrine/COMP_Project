/* Generated By:JJTree: Do not edit this line. ASTSUB.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTSUB extends TypeSensitive {

  public ASTSUB(int id) {
    super(id);
  }

  public ASTSUB(Parser p, int id) {
    super(p, id);
  }

  @Override
  public void addSymbolTable(SymbolTable symbolTable){
    this.symbolTable = symbolTable;
  }

  @Override
  public void eval(SemanticAnalysis analysis){
    SimpleNode firstChild = (SimpleNode) this.jjtGetChild(0);
    SimpleNode secondChild = (SimpleNode) this.jjtGetChild(1);

    firstChild.addSymbolTable(this.symbolTable);
    secondChild.addSymbolTable(this.symbolTable);

    firstChild.eval(analysis);
    secondChild.eval(analysis);

    if(!this.validType(firstChild, ControlVars.INT, analysis))
      analysis.addError(this.getCoords(), "SUB must have left hand side expression returning an integer.");

    this.initializedUse(firstChild, analysis);

    if(!this.validType(secondChild, ControlVars.INT, analysis))
      analysis.addError(this.getCoords(), "SUB must have right hand side expression returning an integer.");

    this.initializedUse(secondChild, analysis);
  }
}
/* JavaCC - OriginalChecksum=98d1976b6139d7188e8c28dcbea08ceb (do not edit this line) */
