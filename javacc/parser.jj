/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. parser.jj */
/*@egen*/options
{
    LOOKAHEAD=1;
                 
}

PARSER_BEGIN(Parser)

import java.io.FileNotFoundException;public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();

/*@egen*/
    public static void main(String args[]) throws ParseException {

        Parser grammar;

        if(args.length == 1) {
            try{
                java.io.FileInputStream file = new java.io.FileInputStream(new java.io.File(args[0]));
                grammar = new Parser(file);
            } catch (FileNotFoundException ex) {
                System.out.println(ex);
                return;
            }
        } else {
            grammar = new Parser(System.in);
        }

        SimpleNode root = grammar.Program(); // returns reference to root node

        System.out.println("\n Code is accepted by Java-- grammar! \n");
    }
}


PARSER_END(Parser)

SKIP :
{
    " "                         |
    "\r"                        |
    "\t"                        |
    "\n"                        |
    < "//" (~["\r", "\n"])* >
}

TOKEN : {
    < LOGICOP: "&&" >           |
    < RELOP: "<" >              |
    < MULT: "*" >               |
    < DIV: "/" >                |
    < SUM: "+" >                |
    < SUB: "-" >                |
    < ASSIGN: "=" >             |
    < NEG: "!" >                        
}

TOKEN :
{
    < IMPORT: "import" >        |
    < CLASS: "class" >          |
    < EXTENDS: "extends" >      |
    < PUBLIC: "public" >        |
    < RETURN: "return" >        |
    < STATIC: "static" >        |
    < VOID: "void" >            |
    < MAIN: "main" >            |
    < NEW: "new" >            
}

TOKEN :
{
    < WHILE: "while" >          |
    < IF: "if" >                |
    < ELSE: "else" >            |
    < TRUE: "true" >            |
    < FALSE: "false" >        
}

TOKEN :
{
    < INT: "int" >              |
    < BOOL: "boolean" >         |
    < STRING: "String" >      
}

TOKEN:
{
    < THIS: "this" >            |
    < LENGTH: "length" >      
}

TOKEN : {
    < COMPLETE: "complete" >
}

TOKEN :
{
    < LBRACKET: "{" >           |
    < RBRACKET: "}" >           |
    < LSQBRACKET: "[" >         |
    < RSQBRACKET: "]" >         |
    < LPRTHSIS: "(">            |
    < RPRTHSIS: ")">            |
    < DOT: "." >                |
    < COMMA: "," >              |
    < SEMICOLON: ";" >        
}

TOKEN: {
    < LETTER: ["a"-"z","A"-"Z"] >                     |
    < INTEGERLITERAL: (["0"-"9"])+ >                  |
    < IDENTIFIER: <LETTER>(<LETTER>|["0"-"9"]|"_")* >
}

SimpleNode Program(): {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
    try {
/*@egen*/
    ImportDeclaration() ClassDeclaration() <EOF>/*@bgen(jjtree)*/
                                                 {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtc000 = false;
                                                 }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ImportDeclaration() : {/*@bgen(jjtree) ImportDeclaration */
  ASTImportDeclaration jjtn000 = new ASTImportDeclaration(JJTIMPORTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ImportDeclaration */
    try {
/*@egen*/
    (<IMPORT> Complete() <SEMICOLON>)*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Complete() : {/*@bgen(jjtree) Complete */
  ASTComplete jjtn000 = new ASTComplete(JJTCOMPLETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Complete */
    try {
/*@egen*/
    <IDENTIFIER> (<DOT> <IDENTIFIER>)* <LPRTHSIS> Type() <RPRTHSIS>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ClassDeclaration() : {/*@bgen(jjtree) ClassDeclaration */
  ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) ClassDeclaration */
    try {
/*@egen*/
    <CLASS> <IDENTIFIER> [<EXTENDS> <IDENTIFIER>] <LBRACKET>
    (VarDeclaration())*
    (MethodDeclaration())*
    <RBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VarDeclaration() : {/*@bgen(jjtree) VarDeclaration */
  ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) VarDeclaration */
    try {
/*@egen*/
    NonIdentifierVarDeclaration()
    |
    IdentifierVarDeclaration()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NonIdentifierVarDeclaration() : {/*@bgen(jjtree) NonIdentifierVarDeclaration */
  ASTNonIdentifierVarDeclaration jjtn000 = new ASTNonIdentifierVarDeclaration(JJTNONIDENTIFIERVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NonIdentifierVarDeclaration */
    try {
/*@egen*/
    Type() <IDENTIFIER> <SEMICOLON>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void IdentifierVarDeclaration() : {/*@bgen(jjtree) IdentifierVarDeclaration */
  ASTIdentifierVarDeclaration jjtn000 = new ASTIdentifierVarDeclaration(JJTIDENTIFIERVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IdentifierVarDeclaration */
    try {
/*@egen*/
    <IDENTIFIER> <SEMICOLON>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Type() : {/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
    try {
/*@egen*/
    <BOOL>
    |
    <INT> [<LSQBRACKET> <RSQBRACKET>]/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MethodDeclaration() : {/*@bgen(jjtree) MethodDeclaration */
  ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodDeclaration */
    try {
/*@egen*/
    <PUBLIC> (RegularMethod() | MainMethod())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void RegularMethod() : {/*@bgen(jjtree) RegularMethod */
  ASTRegularMethod jjtn000 = new ASTRegularMethod(JJTREGULARMETHOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RegularMethod */
    try {
/*@egen*/
    Type() <IDENTIFIER>
    <LPRTHSIS> [Type() <IDENTIFIER> (<COMMA> Type() <IDENTIFIER>)*] <RPRTHSIS>
    <LBRACKET>
    MethodBody()
    <RETURN> TerminalExpression() <SEMICOLON>
    <RBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MainMethod() : {/*@bgen(jjtree) MainMethod */
  ASTMainMethod jjtn000 = new ASTMainMethod(JJTMAINMETHOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MainMethod */
    try {
/*@egen*/
    <STATIC> <VOID> <MAIN>
    <LPRTHSIS> <STRING> <LSQBRACKET> <RSQBRACKET> <IDENTIFIER> <RPRTHSIS>
    <LBRACKET>
    MethodBody()
    <RBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MethodBody() : {/*@bgen(jjtree) MethodBody */
  ASTMethodBody jjtn000 = new ASTMethodBody(JJTMETHODBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodBody */
    try {
/*@egen*/
    NonIdentifierVarDeclaration() MethodBody()
    |
    <IDENTIFIER> (IdentifierVarDeclaration() MethodBody() | IdentifierStatements() (Statement())*)
    |
    NonIdentifierStatements() (Statement())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Statement() : {/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
    try {
/*@egen*/
    NonIdentifierStatements()
    |
    <IDENTIFIER> IdentifierStatements()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void EnclosedStatement() : {/*@bgen(jjtree) EnclosedStatement */
  ASTEnclosedStatement jjtn000 = new ASTEnclosedStatement(JJTENCLOSEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EnclosedStatement */
    try {
/*@egen*/
    <LBRACKET> (Statement())* <RBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void IfElseStatement() : {/*@bgen(jjtree) IfElseStatement */
  ASTIfElseStatement jjtn000 = new ASTIfElseStatement(JJTIFELSESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfElseStatement */
    try {
/*@egen*/
    <IF> <LPRTHSIS> TerminalExpression() <RPRTHSIS> Statement()
    <ELSE> Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void WhileStatement() : {/*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileStatement */
    try {
/*@egen*/
    <WHILE> <LPRTHSIS> TerminalExpression() <RPRTHSIS> Statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NonIdentifierStatements() : {/*@bgen(jjtree) NonIdentifierStatements */
  ASTNonIdentifierStatements jjtn000 = new ASTNonIdentifierStatements(JJTNONIDENTIFIERSTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NonIdentifierStatements */
    try {
/*@egen*/
    EnclosedStatement()
    |
    IfElseStatement()
    |
    WhileStatement()
    |
    NITerminalExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void IdentifierStatements() : {/*@bgen(jjtree) IdentifierStatements */
  ASTIdentifierStatements jjtn000 = new ASTIdentifierStatements(JJTIDENTIFIERSTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IdentifierStatements */
    try {
/*@egen*/
    (AssignStatement() | (ArrayAccess() (AssignStatement() | ComplexExpression())) | NoAccessComplexExpression()) <SEMICOLON>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ArrayAccess() : {/*@bgen(jjtree) ArrayAccess */
  ASTArrayAccess jjtn000 = new ASTArrayAccess(JJTARRAYACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrayAccess */
    try {
/*@egen*/
    <LSQBRACKET> TerminalExpression() <RSQBRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AssignStatement() : {/*@bgen(jjtree) AssignStatement */
  ASTAssignStatement jjtn000 = new ASTAssignStatement(JJTASSIGNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AssignStatement */
   try {
/*@egen*/
   <ASSIGN> TerminalExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void ComplexExpression() : {/*@bgen(jjtree) ComplexExpression */
  ASTComplexExpression jjtn000 = new ASTComplexExpression(JJTCOMPLEXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ComplexExpression */
    try {
/*@egen*/
    AccessComplexExpression()
    |
    NoAccessComplexExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NoAccessComplexExpression() : {/*@bgen(jjtree) NoAccessComplexExpression */
                                    ASTNoAccessComplexExpression jjtn000 = new ASTNoAccessComplexExpression(JJTNOACCESSCOMPLEXEXPRESSION);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NoAccessComplexExpression */
    try {
/*@egen*/
    (OperationsPriority1() | OperationsPriority2() | OperationsPriority3()) ComplexExpression()
    |
    <DOT> (/*@bgen(jjtree) LENGTH */
           {
             ASTLENGTH jjtn001 = new ASTLENGTH(JJTLENGTH);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*/<LENGTH>/*@bgen(jjtree)*/
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
           }
/*@egen*/         | t = <IDENTIFIER> <LPRTHSIS> [TerminalExpression() (<COMMA> TerminalExpression())*] <RPRTHSIS>/*@bgen(jjtree) FUNCMETHOD */
                                                                                                                            {
                                                                                                                              ASTFUNCMETHOD jjtn002 = new ASTFUNCMETHOD(JJTFUNCMETHOD);
                                                                                                                              boolean jjtc002 = true;
                                                                                                                              jjtree.openNodeScope(jjtn002);
                                                                                                                            }
                                                                                                                            try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                            {
                                                                                                                              jjtree.closeNodeScope(jjtn002, true);
                                                                                                                              jjtc002 = false;
                                                                                                                            }
/*@egen*/ {jjtn002.methodID = t.image;}/*@bgen(jjtree)*/
                                                                                                                            } finally {
                                                                                                                              if (jjtc002) {
                                                                                                                                jjtree.closeNodeScope(jjtn002, true);
                                                                                                                              }
                                                                                                                            }
/*@egen*/            ) ComplexExpression()
    |/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void OperationsPriority1() : {/*@bgen(jjtree) OperationsPriority1 */
  ASTOperationsPriority1 jjtn000 = new ASTOperationsPriority1(JJTOPERATIONSPRIORITY1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OperationsPriority1 */
    try {
/*@egen*/
    <MULT>    TerminalExpression() /*#MULT(2)*/
    |
    <DIV>     TerminalExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ /*#DIV(2)*/
}

void OperationsPriority2() : {/*@bgen(jjtree) OperationsPriority2 */
  ASTOperationsPriority2 jjtn000 = new ASTOperationsPriority2(JJTOPERATIONSPRIORITY2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OperationsPriority2 */
    try {
/*@egen*/
    <SUM>     TerminalExpression() /*#SUM(2)*/
    |
    <SUB>     TerminalExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ /*#SUB(2)*/
}

void OperationsPriority3() : {/*@bgen(jjtree) OperationsPriority3 */
  ASTOperationsPriority3 jjtn000 = new ASTOperationsPriority3(JJTOPERATIONSPRIORITY3);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OperationsPriority3 */
    try {
/*@egen*/
    <LOGICOP> TerminalExpression() /*#AND(2)*/
    |
    <RELOP>   TerminalExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ /*#LESSTHAN(2)*/
}

void AccessComplexExpression() : {/*@bgen(jjtree) AccessComplexExpression */
  ASTAccessComplexExpression jjtn000 = new ASTAccessComplexExpression(JJTACCESSCOMPLEXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AccessComplexExpression */
    try {
/*@egen*/
    ArrayAccess() ComplexExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TerminalExpression() : {/*@bgen(jjtree) TerminalExpression */
  ASTTerminalExpression jjtn000 = new ASTTerminalExpression(JJTTERMINALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TerminalExpression */
    try {
/*@egen*/
    NITerminalExpression() | ITerminalExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NITerminalExpression() : {/*@bgen(jjtree) NITerminalExpression */
                               ASTNITerminalExpression jjtn000 = new ASTNITerminalExpression(JJTNITERMINALEXPRESSION);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NITerminalExpression */
    try {
/*@egen*/
    t = <INTEGERLITERAL>/*@bgen(jjtree) NUM */
                         {
                           ASTNUM jjtn001 = new ASTNUM(JJTNUM);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn001, true);
                           jjtc001 = false;
                         }
/*@egen*/ {jjtn001.value = Integer.parseInt(t.image);}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                           }
                         }
/*@egen*/      ComplexExpression()
    |
    t = <TRUE>/*@bgen(jjtree) BOOL */
               {
                 ASTBOOL jjtn002 = new ASTBOOL(JJTBOOL);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
               }
               try {
/*@egen*//*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn002, true);
                 jjtc002 = false;
               }
/*@egen*/ {jjtn002.truth_value = true;}/*@bgen(jjtree)*/
               } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002, true);
                 }
               }
/*@egen*/       ComplexExpression()
    |
    t = <FALSE>/*@bgen(jjtree) BOOL */
                {
                  ASTBOOL jjtn003 = new ASTBOOL(JJTBOOL);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn003, true);
                  jjtc003 = false;
                }
/*@egen*/ {jjtn003.truth_value = false;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003, true);
                  }
                }
/*@egen*/       ComplexExpression()
    |
    <THIS> ComplexExpression()
    |
    <NEW> (<INT> <LSQBRACKET> TerminalExpression() <RSQBRACKET> | <IDENTIFIER> <LPRTHSIS> <RPRTHSIS>) ComplexExpression()
    |
    <NEG> TerminalExpression() ComplexExpression()
    |
    <LPRTHSIS> TerminalExpression() <RPRTHSIS> ComplexExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ITerminalExpression() : {/*@bgen(jjtree) ITerminalExpression */
  ASTITerminalExpression jjtn000 = new ASTITerminalExpression(JJTITERMINALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ITerminalExpression */
    try {
/*@egen*/
    <IDENTIFIER> ComplexExpression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}