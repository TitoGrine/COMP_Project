options
{
    LOOKAHEAD=1;
    MULTI = true;
}

PARSER_BEGIN(Parser)

import java.io.FileNotFoundException;

public class Parser
{

    private static int nr_errors = 0;
    private static int MAX_ERRORS = 10;

    public static void main(String args[]) throws ParseException {

        Parser grammar;

        if(args.length == 1) {
            try{
                java.io.FileInputStream file = new java.io.FileInputStream(new java.io.File(args[0]));
                grammar = new Parser(file);
            } catch (FileNotFoundException ex) {
                System.out.println(ex);
                return;
            }
        } else {
            grammar = new Parser(System.in);
        }

        SimpleNode root = grammar.Program(); // returns reference to root node



    }

    void errorSkip(int kind) {
      Token t;
      do {
        t = getNextToken();
      }
      while (t.kind != kind);
    }


    void displayError(ParseException e, String condition) {

        nr_errors++;

        System.out.println("Error in " + condition + "condition.\n" + e.toString());

        errorSkip(RPRTHSIS);

        if (MAX_ERRORS < nr_errors) {
          System.out.println("The program has reached the maximum number of errors (10). Exiting...");
          System.exit(2);
        }
      }

}

PARSER_END(Parser)

// ==================================== SKIP ==================================== //

SKIP :
{
    " "                         |
    "\r"                        |
    "\t"                        |
    "\n"                        |
    < "//" (~["\r", "\n"])* >   |
    "/*" : MULTILINE_COMMENT
}

<MULTILINE_COMMENT> SKIP :
{
  "*/" : DEFAULT                |
  < ~[] >
}

// =================================== TOKENS =================================== //

TOKEN : {
    < AND: "&&" >           |
    < LESS: "<" >              |
    < MULT: "*" >               |
    < DIV: "/" >                |
    < SUM: "+" >                |
    < SUB: "-" >                |
    < ASSIGN: "=" >             |
    < NEG: "!" >                        
}

TOKEN :
{
    < IMPORT: "import" >        |
    < CLASS: "class" >          |
    < EXTENDS: "extends" >      |
    < PUBLIC: "public" >        |
    < RETURN: "return" >        |
    < STATIC: "static" >        |
    < VOID: "void" >            |
    < MAIN: "main" >            |
    < NEW: "new" >            
}

TOKEN :
{
    < WHILE: "while" >          |
    < IF: "if" >                |
    < ELSE: "else" >            |
    < TRUE: "true" >            |
    < FALSE: "false" >        
}

TOKEN :
{
    < INT: "int" >              |
    < BOOL: "boolean" >         |
    < STRING: "String" >      
}

TOKEN:
{
    < THIS: "this" >            |
    < LENGTH: "length" >      
}

TOKEN :
{
    < LBRACKET: "{" >           |
    < RBRACKET: "}" >           |
    < LSQBRACKET: "[" >         |
    < RSQBRACKET: "]" >         |
    < LPRTHSIS: "(">            |
    < RPRTHSIS: ")">            |
    < DOT: "." >                |
    < COMMA: "," >              |
    < SEMICOLON: ";" >        
}

TOKEN: {
    < INTEGERLITERAL: (["0"-"9"])+ >                                                |
    < IDENTIFIER: ["a"-"z","A"-"Z", "$", "_"](["a"-"z","A"-"Z"]|["0"-"9"]|"_")* >
}

// ================================= EXPRESSIONS ================================= //

SimpleNode Program() #PROGRAM : {}
{
    ImportDeclaration() ClassDeclaration() <EOF> {return jjtThis;}
}

void ImportDeclaration() #void : {}
{
    (<IMPORT> ImportExpression() <SEMICOLON>)*
}

void ImportExpression() #void: {}
{
    (<STATIC> Identifier() (<DOT> Identifier())* [(<LPRTHSIS> [Type() (<COMMA> Type())*] <RPRTHSIS>) #PARAMETERS Type() #RETURN]) #STATIC_IMPORT
    |
    (Identifier() (<DOT> Identifier())* [(<LPRTHSIS> [Type() (<COMMA> Type())*] <RPRTHSIS>) #PARAMETERS Type() #RETURN]) #IMPORT
}

void ClassDeclaration() #CLASS : {Token t;}
{
    <CLASS> t=<IDENTIFIER> {jjtThis.name = t.image;} [<EXTENDS> t=<IDENTIFIER> {jjtThis.class_name = t.image;} #EXTENDS] <LBRACKET>
    (VarDeclaration())*
    (MethodDeclaration())*
    <RBRACKET>
}

void VarDeclaration() #void : {Token t;}
{
    NonIdentifierVarDeclaration()
    |
    t=<IDENTIFIER> IdentifierVarDeclaration(t)
}

void NonIdentifierVarDeclaration() #VARIABLE : {Token t;}
{
    NonIdentifierType() t=<IDENTIFIER> {jjtThis.name = t.image;} #IDENT <SEMICOLON>
}

void IdentifierVarDeclaration(Token previous_token) #VARIABLE : {Token t;}
{
    {} {jjtThis.typeID = previous_token.image;} #TYPE t=<IDENTIFIER> {jjtThis.name = t.image;} #IDENT <SEMICOLON>
}

void Type() #void : {Token t;}
{
    NonIdentifierType()
    |
    t = <IDENTIFIER> {jjtThis.typeID = t.image;} #TYPE
}

void NonIdentifierType() #TYPE : {}
{
    <BOOL> {jjtThis.typeID = "bool";}
    |
    <INT> (<LSQBRACKET> <RSQBRACKET> {jjtThis.typeID = "int[]";} | {} {jjtThis.typeID = "int";})
    |
    <STRING> {jjtThis.typeID = "string";}
    |
    <VOID> {jjtThis.typeID = "";}
}

void MethodDeclaration() #void : {}
{
    <PUBLIC> (RegularMethod() | MainMethod())
}

void RegularMethod() #METHOD : {Token t;}
{
    Type() t=<IDENTIFIER> {jjtThis.name = t.image;} Arguments()
    <LBRACKET>
    MethodBody() #METHOD_BODY
    <RETURN> Expression0() <SEMICOLON>
    <RBRACKET>
}

void Arguments() #ARGUMENTS : {}
{
    <LPRTHSIS> [Type() Identifier() (<COMMA> Type() Identifier())*] <RPRTHSIS>
}

void MainMethod() #MAINMETHOD : {}
{
    <STATIC> <VOID> <MAIN> <LPRTHSIS> <STRING> <LSQBRACKET> <RSQBRACKET> Identifier() <RPRTHSIS>
    <LBRACKET>
    MethodBody() #METHOD_BODY
    <RBRACKET>
}

void MethodBody() #void : {Token t;}
{
    NonIdentifierVarDeclaration() MethodBody()
    |
    t=<IDENTIFIER> (IdentifierVarDeclaration(t) MethodBody() | IdentifierStatements(t) (Statement())*)
    |
    NonIdentifierStatements() (Statement())*
    |
    {}
}

void Statement() #void : {Token t;}
{
    NonIdentifierStatements()
    |
    t=<IDENTIFIER> IdentifierStatements(t)
}

void NonIdentifierStatements() #void : {}
{
    EnclosedStatement()
    |
    IfElseStatement()
    |
    WhileStatement()
    |
    ExpressionStatement()
}

void EnclosedStatement() #SCOPE : {}
{
    <LBRACKET> (Statement())* <RBRACKET>
}

void IfElseStatement() #void : {}
{
    IfStatement() ElseStatement()
}

void IfStatement() #IF : {}
{
    <IF> <LPRTHSIS> (Expression0() #CONDITION) <RPRTHSIS> Statement()
}

void ElseStatement() #ELSE : {}
{
    <ELSE> Statement()
}

void WhileStatement() #WHILE : {}
{
    <WHILE> <LPRTHSIS> (Expression0() #CONDITION) <RPRTHSIS> Statement()
}

void ExpressionStatement() #void : {}
{
    NIExpression0() <SEMICOLON>
}

void IdentifierStatements(Token t) #void : {}
{
     (AssignStatement(t) | (ArrayAccess() (AssignStatement(t) | Expression0())) | NAExpression0(t)) <SEMICOLON>
}

void ArrayAccess() #ARRAYACCESS : {}
{
    <LSQBRACKET> Expression0() <RSQBRACKET>
}

void AssignStatement(Token t) #ASSIGN : {}
{
    ({} {jjtThis.name = t.image;} #IDENT) <ASSIGN> Expression0()
}

// ============================== Expressions 0 ============================== //

void Expression0() #void : {}
{
    Expression1() Expression0_alt()
}

void NIExpression0() #void : {}
{
    NIExpression1() Expression0_alt()
}

void NAExpression0(Token t) #void : {}
{
    NAExpression1(t) Expression0_alt()
}

void Expression0_alt() #void : {}
{
    <AND> Expression1() #AND(2) Expression0_alt()
    |
    {}
}

// ============================== Expressions 1 ============================== //

void Expression1() #void : {}
{
    Expression2() Expression1_alt()
}

void NIExpression1() #void : {}
{
    NIExpression2() Expression1_alt()
}

void NAExpression1(Token t) #void : {}
{
    NAExpression2(t) Expression1_alt()
}

void Expression1_alt() #void : {}
{
    <LESS> Expression2() #LESSTHAN(2) Expression1_alt()
    |
    {}
}

// ============================== Expressions 2 ============================== //

void Expression2() #void : {}
{
    Expression3() Expression2_alt()
}

void NIExpression2() #void : {}
{
    NIExpression3() Expression2_alt()
}

void NAExpression2(Token t) #void : {}
{
    NAExpression3(t) Expression2_alt()
}

void Expression2_alt() #void : {}
{
    <SUM> Expression3() #ADD(2) Expression2_alt()
    |
    <SUB> Expression3() #SUB(2) Expression2_alt()
    |
    {}
}

// ============================== Expressions 3 ============================== //

void Expression3() #void : {}
{
    Expression4() Expression3_alt()
}

void NIExpression3() #void : {}
{
    NIExpression4() Expression3_alt()
}

void NAExpression3(Token t) #void : {}
{
    NAExpression4(t) Expression3_alt()
}

void Expression3_alt() #void : {}
{
    <MULT> Expression4() #MUL(2) Expression3_alt()
    |
    <DIV> Expression4() #DIV(2) Expression3_alt()
    |
    {}
}

// ============================== Expressions 4 ============================== //

void Expression4() #void : {}
{
    Expression5() Expression4_alt()
    |
    DotOperator() Expression4_alt()
}

void NIExpression4() #void : {}
{
    NIExpression5() Expression4_alt()
}

void NAExpression4(Token t) #void : {}
{
    NIExpression5() NAExpression4_alt(t)
}

void Expression4_alt() #void : {}
{
    ArrayAccess() Expression4_alt()
    |
    NAExpression4_alt(null)
}

void NAExpression4_alt(Token t) #void : {}
{
    (DotOperator() Expression4_alt() {jjtThis.methodID = (t == null ? "" : t.image);}) #FUNCMETHOD
    |
    {}
}

void DotOperator() #void : {}
{
    <DOT> (<LENGTH> #LENGTH | (Identifier()  GivenArguments()))
}

void GivenArguments() #ARGUMENTS : {}
{
    <LPRTHSIS> [Expression0() (<COMMA> Expression0())*] <RPRTHSIS>
}

// ============================== Expressions 5 ============================== //

void Expression5() #void : {}
{
    TerminalExpression()
}

void NIExpression5() #void : {}
{
    NITerminalExpression()
    |
    {}
}

// ========================== Terminal Expressions ========================== //

void TerminalExpression() #void: {}
{
    NITerminalExpression()
    |
    Identifier()
}

void NITerminalExpression() #void : {Token t;}
{
    t = <INTEGERLITERAL> {jjtThis.value = Integer.parseInt(t.image);} #NUM
    |
    t = <TRUE> {jjtThis.truth_value = true;} #BOOL
    |
    t = <FALSE> {jjtThis.truth_value = false;} #BOOL
    |
    <THIS> #THIS
    |
    <NEW> (<INT> <LSQBRACKET> Expression0() <RSQBRACKET> | Identifier() #NEW <LPRTHSIS> <RPRTHSIS>)
    |
    <NEG> Expression4() #NEGATION
    |
    <LPRTHSIS> Expression0() <RPRTHSIS>
}

void Identifier() #void : {Token t;}
{
    t = <IDENTIFIER> {jjtThis.name = t.image;} #IDENT
}


